version: '3.8'

services:
  # Production Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-chorestree}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    labels:
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "postgres"}]'
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=768MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Database (No persistent volume, optimized for testing)
  postgres_test:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${TEST_DB_USER:-postgres_test}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD:-postgres_test}
      POSTGRES_DB: ${TEST_DB_NAME:-chorestree_test}
    ports:
      - "5433:5432"
    command: >
      postgres
      -c max_connections=20
      -c shared_buffers=128MB
      -c effective_cache_size=384MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c default_statistics_target=50
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_DB_USER:-postgres_test}"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Hot Cache (Layer 1 - 50MB, 5min TTL)
  redis_hot:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 50mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    labels:
      com.datadoghq.ad.logs: '[{"source": "redis", "service": "redis_hot"}]'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Warm Cache (Layer 2 - 450MB, 30min TTL)
  redis_warm:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: >
      redis-server
      --maxmemory 450mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    labels:
      com.datadoghq.ad.logs: '[{"source": "redis", "service": "redis_warm"}]'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Production RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management interface
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    labels:
      com.datadoghq.ad.logs: '[{"source": "rabbitmq", "service": "rabbitmq"}]'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
        rabbitmq-server &
        sleep 10 &&
        rabbitmqctl set_vm_memory_high_watermark 0.7 &&
        rabbitmqctl set_disk_free_limit 2GB &&
        wait
      "

  # Test RabbitMQ (No persistent storage, optimized for testing)
  rabbitmq_test:
    image: rabbitmq:3-management-alpine
    ports:
      - "5673:5672"   # AMQP protocol
      - "15673:15672" # Management interface
    environment:
      RABBITMQ_DEFAULT_USER: ${TEST_RABBITMQ_USER:-rabbitmq_test}
      RABBITMQ_DEFAULT_PASS: ${TEST_RABBITMQ_PASSWORD:-rabbitmq_test}
    tmpfs:
      - /var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 3
    command: >
      bash -c "
        rabbitmq-server &
        sleep 5 &&
        rabbitmqctl set_vm_memory_high_watermark 0.4 &&
        rabbitmqctl set_disk_free_limit 512MB &&
        wait
      "

  # DataDog Agent
  datadog:
    image: datadog/agent:latest
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.eu}
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE=image:datadog/agent
      - DD_APM_ENABLED=true
      # Service discovery configurations
      - DD_ENABLE_METADATA_COLLECTION=true
      - DD_DOCKER_LABELS_AS_TAGS=true
      - DD_DOCKER_ENV_AS_TAGS=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    healthcheck:
      test: ["CMD", "agent", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  rabbitmq_data: